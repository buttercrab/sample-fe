"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  mergeProps: () => mergeProps,
  normalizeProps: () => normalizeProps,
  useActor: () => useActor,
  useMachine: () => useMachine
});
module.exports = __toCommonJS(src_exports);

// src/merge-props.ts
var import_core = require("@zag-js/core");
function mergeProps(...sources) {
  const target = {};
  for (let i = 0; i < sources.length; i++) {
    let source = sources[i];
    if (typeof source === "function") source = source();
    if (source) {
      const descriptors = Object.getOwnPropertyDescriptors(source);
      for (const key in descriptors) {
        if (key in target) continue;
        Object.defineProperty(target, key, {
          enumerable: true,
          get() {
            let e = {};
            if (key === "style" || key === "class" || key === "className" || key.startsWith("on")) {
              for (let i2 = 0; i2 < sources.length; i2++) {
                let s = sources[i2];
                if (typeof s === "function") s = s();
                e = (0, import_core.mergeProps)(e, { [key]: (s || {})[key] });
              }
              return e[key];
            }
            for (let i2 = sources.length - 1; i2 >= 0; i2--) {
              let v, s = sources[i2];
              if (typeof s === "function") s = s();
              v = (s || {})[key];
              if (v !== void 0) return v;
            }
          }
        });
      }
    }
  }
  return target;
}

// src/normalize-props.ts
var import_types = require("@zag-js/types");

// ../../utilities/core/src/guard.ts
var isArray = (v) => Array.isArray(v);
var isObject = (v) => !(v == null || typeof v !== "object" || isArray(v));
var isNumber = (v) => typeof v === "number" && !Number.isNaN(v);
var isString = (v) => typeof v === "string";

// src/normalize-props.ts
var eventMap = {
  onFocus: "onFocusIn",
  onBlur: "onFocusOut",
  onDoubleClick: "onDblClick",
  onChange: "onInput",
  defaultChecked: "checked",
  defaultValue: "value",
  htmlFor: "for",
  className: "class"
};
var format = (v) => v.startsWith("--") ? v : hyphenateStyleName(v);
function toSolidProp(prop) {
  return prop in eventMap ? eventMap[prop] : prop;
}
var normalizeProps = (0, import_types.createNormalizer)((props) => {
  const normalized = {};
  for (const key in props) {
    const value = props[key];
    if (key === "readOnly" && value === false) {
      continue;
    }
    if (key === "style" && isObject(value)) {
      normalized["style"] = cssify(value);
      continue;
    }
    if (key === "children") {
      if (isString(value)) {
        normalized["textContent"] = value;
      }
      continue;
    }
    normalized[toSolidProp(key)] = value;
  }
  return normalized;
});
function cssify(style) {
  let css = {};
  for (const property in style) {
    const value = style[property];
    if (!isString(value) && !isNumber(value)) continue;
    css[format(property)] = value;
  }
  return css;
}
var uppercasePattern = /[A-Z]/g;
var msPattern = /^ms-/;
function toHyphenLower(match) {
  return "-" + match.toLowerCase();
}
var cache = {};
function hyphenateStyleName(name) {
  if (cache.hasOwnProperty(name)) return cache[name];
  var hName = name.replace(uppercasePattern, toHyphenLower);
  return cache[name] = msPattern.test(hName) ? "-" + hName : hName;
}

// src/use-snapshot.ts
var import_solid_js = require("solid-js");
var import_store = require("solid-js/store");
function useSnapshot(service, options) {
  const { actions, context } = options ?? {};
  const [state, setState] = (0, import_store.createStore)(service.getState());
  (0, import_solid_js.onMount)(() => {
    const unsubscribe = service.subscribe((nextState) => {
      setState((0, import_store.reconcile)(nextState));
    });
    (0, import_solid_js.onCleanup)(() => {
      unsubscribe();
    });
  });
  (0, import_solid_js.createEffect)(() => {
    const contextValue = typeof context === "function" ? context() : context;
    service.setContext(contextValue);
  });
  (0, import_solid_js.createEffect)(() => {
    service.setOptions({ actions });
  });
  return state;
}

// src/use-actor.ts
function useActor(service) {
  const state = useSnapshot(service);
  return [state, service.send];
}

// src/use-service.ts
var import_solid_js2 = require("solid-js");
function useService(machine, options) {
  const { state: hydratedState, context } = options ?? {};
  const service = (() => {
    const instance = typeof machine === "function" ? machine() : machine;
    const ctx = typeof context === "function" ? context() : context;
    if (ctx) instance.setContext(ctx);
    instance._created();
    return instance;
  })();
  (0, import_solid_js2.onMount)(() => {
    service.start(hydratedState);
    (0, import_solid_js2.onCleanup)(() => {
      service.stop();
    });
  });
  return service;
}

// src/use-machine.ts
function useMachine(machine, options) {
  const service = useService(machine, options);
  const state = useSnapshot(service, options);
  return [state, service.send, service];
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  mergeProps,
  normalizeProps,
  useActor,
  useMachine
});
//# sourceMappingURL=index.js.map