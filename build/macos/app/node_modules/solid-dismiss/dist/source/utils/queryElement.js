import { getMenuButton } from "../local/menuButton";
import { isObjectLiteral } from "./isObjectLiteral";
import { getNextTabbableElement } from "./tabbing";
export const queryElement = (state, { inputElement, type, subType, }) => {
    if (inputElement === "menuPopup") {
        return state.menuPopupEl;
    }
    if (inputElement === "menuButton") {
        return getMenuButton(state.menuBtnEls);
    }
    if (type === "focusElementOnOpen") {
        if (isObjectLiteral(inputElement)) {
            return queryElement(state, {
                inputElement: inputElement.target,
                type: "focusElementOnOpen",
            });
        }
        if (inputElement === "none")
            return null;
        if (inputElement === "firstChild") {
            return getNextTabbableElement({
                from: state.focusSentinelBeforeEl,
                stopAtRootElement: state.containerEl,
            });
        }
        if (typeof inputElement === "string") {
            return state.containerEl?.querySelector(inputElement);
        }
        if (inputElement instanceof Element) {
            return inputElement;
        }
        if (typeof inputElement === "object") {
            return queryElement(state, {
                inputElement: inputElement.target,
                type: "focusElementOnOpen",
            });
        }
        const component = inputElement();
        if (typeof component === "string") {
            return state.containerEl?.querySelector(component);
        }
        return component;
    }
    if (inputElement == null && type === "menuPopup") {
        if (!state.containerEl)
            return null;
        if (state.menuPopupEl)
            return state.menuPopupEl;
        return state.containerEl.children[1];
    }
    if (typeof inputElement === "string" && type === "menuButton") {
        return document.querySelector(inputElement);
    }
    if (typeof inputElement === "string") {
        return document.querySelector(inputElement);
    }
    if (inputElement instanceof Element) {
        return inputElement;
    }
    if (typeof inputElement === "function") {
        const result = inputElement();
        if (result instanceof Element) {
            return result;
        }
        if (type === "closeButton") {
            if (!state.containerEl)
                return null;
            return state.containerEl.querySelector(result);
        }
    }
    if (type === "focusElementOnClose") {
        if (!inputElement)
            return null;
        switch (subType) {
            case "tabForwards":
                return queryElement(state, { inputElement: inputElement.tabForwards });
            case "tabBackwards":
                return queryElement(state, { inputElement: inputElement.tabBackwards });
            case "click":
                return queryElement(state, { inputElement: inputElement.click });
            case "escapeKey":
                return queryElement(state, { inputElement: inputElement.escapeKey });
            case "scrolling":
                return queryElement(state, { inputElement: inputElement.scrolling });
        }
    }
    if (inputElement == null)
        return null;
    if (Array.isArray(inputElement)) {
        return inputElement.map((el) => queryElement(state, { inputElement: el, type }));
    }
    for (const key in inputElement) {
        const item = inputElement[key];
        return queryElement(state, { inputElement: item });
    }
    return null;
};
