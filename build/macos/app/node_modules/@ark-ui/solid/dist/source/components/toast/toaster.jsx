import { mergeProps, normalizeProps, useActor, useMachine } from '@zag-js/solid';
import * as toast from '@zag-js/toast';
import { For, createMemo, splitProps } from 'solid-js';
import { ark } from '../factory';
import { ToastProvider } from './use-toast-context';
export const Toaster = (props) => {
    const [toasterProps, localProps] = splitProps(props, ['toaster', 'children']);
    const [state, send] = useMachine(toasterProps.toaster.machine);
    const placement = state.context.placement;
    const api = createMemo(() => toast.group.connect(state, send, normalizeProps));
    const toasts = createMemo(() => api().getToastsByPlacement(placement));
    const mergedProps = mergeProps(api().getGroupProps({ placement }), localProps);
    return (<ark.div {...mergedProps}>
      <For each={toasts()}>
        {(toast) => <ToastActor value={toast}>{(ctx) => toasterProps.children(ctx)}</ToastActor>}
      </For>
    </ark.div>);
};
const ToastActor = (props) => {
    const [state, send] = useActor(props.value);
    const api = createMemo(() => toast.connect(state, send, normalizeProps));
    const ctx = createMemo(() => state.context);
    return <ToastProvider value={api}>{props.children(ctx)}</ToastProvider>;
};
