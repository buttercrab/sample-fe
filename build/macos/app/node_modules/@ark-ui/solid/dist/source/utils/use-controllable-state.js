import { createMemo, createSignal, untrack } from 'solid-js';
import { runIfFn } from './run-if-fn';
export function useControllableState(props) {
    const [uncontrolledValue, setUncontrolledValue] = createSignal(runIfFn(props.defaultValue));
    const controlled = createMemo(() => props.value?.() !== undefined);
    const currentValue = createMemo(() => (controlled() ? props.value?.() : uncontrolledValue()));
    const setValue = (next) => {
        untrack(() => {
            const nextValue = runIfFn(next, currentValue());
            if (controlled()) {
                return props.onChange?.(nextValue);
            }
            setUncontrolledValue(nextValue);
            return props.onChange?.(nextValue);
        });
    };
    return [currentValue, setValue];
}
