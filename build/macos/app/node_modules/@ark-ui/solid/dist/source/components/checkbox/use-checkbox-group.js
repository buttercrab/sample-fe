import { createMemo } from 'solid-js';
import { useControllableState } from '../../utils/use-controllable-state';
export function useCheckboxGroup(props = {}) {
    const interative = createMemo(() => !(props.disabled || props.readOnly));
    const [value, setValue] = useControllableState({
        value: props.value,
        defaultValue: props.defaultValue || [],
        onChange: props.onValueChange,
    });
    return createMemo(() => {
        const isChecked = (val) => {
            return value().some((v) => String(v) === String(val));
        };
        const toggleValue = (val) => {
            isChecked(val) ? removeValue(val) : addValue(val);
        };
        const addValue = (val) => {
            if (!interative())
                return;
            if (isChecked(val))
                return;
            setValue(value().concat(val));
        };
        const removeValue = (val) => {
            if (!interative())
                return;
            setValue(value().filter((v) => String(v) !== String(val)));
        };
        const getItemProps = (itemProps) => {
            return {
                checked: itemProps.value != null ? isChecked(itemProps.value) : undefined,
                onCheckedChange() {
                    if (itemProps.value != null) {
                        toggleValue(itemProps.value);
                    }
                },
                name: props.name,
                disabled: props.disabled,
                readOnly: props.readOnly,
                invalid: props.invalid,
            };
        };
        return {
            isChecked,
            value,
            name: props.name,
            disabled: props.disabled,
            readOnly: props.readOnly,
            invalid: props.invalid,
            setValue,
            addValue,
            toggleValue,
            getItemProps,
        };
    });
}
