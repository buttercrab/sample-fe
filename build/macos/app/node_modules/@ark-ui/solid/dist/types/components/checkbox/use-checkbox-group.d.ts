import { type Accessor } from 'solid-js';
export interface UseCheckboxGroupProps {
    /**
     * The initial value of `value` when uncontrolled
     */
    defaultValue?: Accessor<string[]> | string[];
    /**
     * The controlled value of the checkbox group
     */
    value?: Accessor<string[]>;
    /**
     * The name of the input fields in the checkbox group
     * (Useful for form submission).
     */
    name?: string;
    /**
     * The callback to call when the value changes
     */
    onValueChange?: (value: string[]) => void;
    /**
     * If `true`, the checkbox group is disabled
     */
    disabled?: boolean;
    /**
     * If `true`, the checkbox group is read-only
     */
    readOnly?: boolean;
    /**
     * If `true`, the checkbox group is invalid
     */
    invalid?: boolean;
}
export interface CheckboxGroupItemProps {
    value: string | undefined;
}
export declare function useCheckboxGroup(props?: UseCheckboxGroupProps): Accessor<{
    isChecked: (val: string | undefined) => boolean;
    value: Accessor<string[]>;
    name: string;
    disabled: boolean;
    readOnly: boolean;
    invalid: boolean;
    setValue: (next: string[] | ((prev: string[]) => string[])) => void;
    addValue: (val: string) => void;
    toggleValue: (val: string) => void;
    getItemProps: (itemProps: CheckboxGroupItemProps) => {
        checked: boolean;
        onCheckedChange(): void;
        name: string;
        disabled: boolean;
        readOnly: boolean;
        invalid: boolean;
    };
}>;
export type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>;
