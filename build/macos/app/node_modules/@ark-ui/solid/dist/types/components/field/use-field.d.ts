export interface ElementIds {
    root?: string;
    control?: string;
    label?: string;
    errorText?: string;
    helperText?: string;
}
export interface UseFieldProps {
    /**
     * The id of the field.
     */
    id?: string;
    /**
     * The ids of the field parts.
     */
    ids?: ElementIds;
    /**
     * Indicates whether the field is required.
     */
    required?: boolean;
    /**
     * Indicates whether the field is disabled.
     */
    disabled?: boolean;
    /**
     * Indicates whether the field is invalid.
     */
    invalid?: boolean;
    /**
     * Indicates whether the field is read-only.
     */
    readOnly?: boolean;
}
export type UseFieldReturn = ReturnType<typeof useField>;
export declare const useField: (props: UseFieldProps) => import("solid-js").Accessor<{
    ariaDescribedby: string;
    ids: {
        control: string;
        label: string;
        errorText: string;
        helperText: string;
    };
    refs: {
        rootRef: HTMLDivElement;
    };
    disabled: boolean;
    invalid: boolean;
    readOnly: boolean;
    required: boolean;
    getLabelProps: () => {
        id: string;
        'data-disabled': boolean | "false" | "true";
        'data-invalid': boolean | "false" | "true";
        'data-readonly': boolean | "false" | "true";
        htmlFor: string;
        "data-scope": string;
        "data-part": string;
    };
    getRootProps: () => {
        id: string;
        role: string;
        'data-disabled': boolean | "false" | "true";
        'data-invalid': boolean | "false" | "true";
        'data-readonly': boolean | "false" | "true";
        "data-scope": string;
        "data-part": string;
    };
    getInputProps: () => {
        "data-scope": string;
        "data-part": string;
        'aria-describedby': string;
        'aria-invalid': "true";
        'data-invalid': boolean | "false" | "true";
        'data-required': boolean | "false" | "true";
        'data-readonly': boolean | "false" | "true";
        id: string;
        required: boolean;
        disabled: boolean;
        readOnly: boolean;
    };
    getTextareaProps: () => {
        "data-scope": string;
        "data-part": string;
        'aria-describedby': string;
        'aria-invalid': "true";
        'data-invalid': boolean | "false" | "true";
        'data-required': boolean | "false" | "true";
        'data-readonly': boolean | "false" | "true";
        id: string;
        required: boolean;
        disabled: boolean;
        readOnly: boolean;
    };
    getSelectProps: () => {
        "data-scope": string;
        "data-part": string;
        'aria-describedby': string;
        'aria-invalid': "true";
        'data-invalid': boolean | "false" | "true";
        'data-required': boolean | "false" | "true";
        'data-readonly': boolean | "false" | "true";
        id: string;
        required: boolean;
        disabled: boolean;
        readOnly: boolean;
    };
    getHelperTextProps: () => {
        "data-scope": string;
        "data-part": string;
        id: string;
    };
    getErrorTextProps: () => {
        'aria-live': string;
        "data-scope": string;
        "data-part": string;
        id: string;
    };
}>;
