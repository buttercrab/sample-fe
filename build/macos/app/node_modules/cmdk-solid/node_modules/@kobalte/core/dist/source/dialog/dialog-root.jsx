import { createGenerateId, mergeDefaultProps } from "@kobalte/utils";
import { createSignal, createUniqueId } from "solid-js";
import { createDisclosureState, createPresence, createRegisterId, } from "../primitives";
import { DialogContext } from "./dialog-context";
import { DIALOG_INTL_TRANSLATIONS, } from "./dialog.intl";
/**
 * A dialog is a window overlaid on either the primary window or another dialog window.
 */
export function DialogRoot(props) {
    const defaultId = `dialog-${createUniqueId()}`;
    const mergedProps = mergeDefaultProps({
        id: defaultId,
        modal: true,
        translations: DIALOG_INTL_TRANSLATIONS,
    }, props);
    const [contentId, setContentId] = createSignal();
    const [titleId, setTitleId] = createSignal();
    const [descriptionId, setDescriptionId] = createSignal();
    const [triggerRef, setTriggerRef] = createSignal();
    const disclosureState = createDisclosureState({
        open: () => mergedProps.open,
        defaultOpen: () => mergedProps.defaultOpen,
        onOpenChange: (isOpen) => mergedProps.onOpenChange?.(isOpen),
    });
    const shouldMount = () => mergedProps.forceMount || disclosureState.isOpen();
    const overlayPresence = createPresence(shouldMount);
    const contentPresence = createPresence(shouldMount);
    const context = {
        translations: () => mergedProps.translations ?? DIALOG_INTL_TRANSLATIONS,
        isOpen: disclosureState.isOpen,
        modal: () => mergedProps.modal ?? true,
        preventScroll: () => mergedProps.preventScroll ?? context.modal(),
        contentId,
        titleId,
        descriptionId,
        triggerRef,
        overlayPresence,
        contentPresence,
        close: disclosureState.close,
        toggle: disclosureState.toggle,
        setTriggerRef,
        generateId: createGenerateId(() => mergedProps.id),
        registerContentId: createRegisterId(setContentId),
        registerTitleId: createRegisterId(setTitleId),
        registerDescriptionId: createRegisterId(setDescriptionId),
    };
    return (<DialogContext.Provider value={context}>
			{mergedProps.children}
		</DialogContext.Provider>);
}
