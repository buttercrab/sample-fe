import { OverrideComponentProps, ValidationState } from "@kobalte/utils";
import { JSX } from "solid-js";
import { AsChildProp } from "../polymorphic";
import { SpinButtonRootOptions } from "../spin-button";
export interface NumberFieldRootOptions extends Pick<SpinButtonRootOptions, "textValue" | "translations">, AsChildProp {
    /** The controlled formatted value of the number field. */
    value?: string | number;
    /**
     * The default formatted value when initially rendered.
     * Useful when you do not need to control the value.
     */
    defaultValue?: string | number;
    /** Event handler called when the formatted value of the number field changes. */
    onChange?: (value: string) => void;
    /** The controlled raw value of the number field. */
    rawValue?: number;
    /** Event handler called when the raw value of the number field changes. */
    onRawValueChange?: (value: number) => void;
    /** The smallest value allowed, defaults to `Number.MIN_SAFE_INTEGER`. */
    minValue?: number;
    /** The largest value allowed, defaults to `Number.MAX_SAFE_INTEGER`. */
    maxValue?: number;
    /** Increment/Decrement step (Arrow). */
    step?: number;
    /** Increment/Decrement step (Page Up/Down), defaults `10 * step`. */
    largeStep?: number;
    /** Whether to increment/decrement on wheel. */
    changeOnWheel?: boolean;
    /** Whether to format the input value. */
    format?: boolean;
    /** Options for formatting input value. */
    formatOptions?: Intl.NumberFormatOptions;
    /** Allowed input characters, defaults to locale and format characters. */
    allowedInput?: RegExp;
    /**
     * A unique identifier for the component.
     * The id is used to generate id attributes for nested components.
     * If no id prop is provided, a generated id will be used.
     */
    id?: string;
    /**
     * The name of the text field, used when submitting an HTML form.
     * See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).
     */
    name?: string;
    /** Whether the text field should display its "valid" or "invalid" visual styling. */
    validationState?: ValidationState;
    /** Whether the user must fill the text field before the owning form can be submitted. */
    required?: boolean;
    /** Whether the text field is disabled. */
    disabled?: boolean;
    /** Whether the text field is read only. */
    readOnly?: boolean;
}
export interface NumberFieldRootProps extends OverrideComponentProps<"div", NumberFieldRootOptions> {
}
/**
 * A text input that allow users to input custom text entries with a keyboard.
 */
export declare function NumberFieldRoot(props: NumberFieldRootProps): JSX.Element;
