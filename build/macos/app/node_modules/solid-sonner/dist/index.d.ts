import { JSX, Component } from 'solid-js';

type ToastTypes = 'normal' | 'action' | 'success' | 'info' | 'warning' | 'error' | 'loading' | 'default';
type PromiseT<Data = any> = Promise<Data> | (() => Promise<Data>);
type PromiseData<ToastData = any> = ExternalToast & {
    loading: string | JSX.Element;
    success: string | JSX.Element | ((data: ToastData) => JSX.Element | string);
    error: string | JSX.Element | ((error: any) => JSX.Element | string);
    finally?: () => void | Promise<void>;
};
interface ToastClasses {
    toast?: string;
    title?: string;
    description?: string;
    loader?: string;
    closeButton?: string;
    cancelButton?: string;
    actionButton?: string;
    success?: string;
    error?: string;
    info?: string;
    warning?: string;
    loading?: string;
    default?: string;
}
interface ToastIcons {
    success?: JSX.Element;
    info?: JSX.Element;
    warning?: JSX.Element;
    error?: JSX.Element;
    loading?: JSX.Element;
}
interface ToastT {
    id: number | string;
    title?: string | JSX.Element;
    type?: ToastTypes;
    icon?: JSX.Element;
    jsx?: JSX.Element;
    invert?: boolean;
    closeButton?: boolean;
    description?: JSX.Element;
    duration?: number;
    delete?: boolean;
    important?: boolean;
    action?: {
        label: string;
        onClick: (event: MouseEvent) => void;
    };
    cancel?: {
        label: string;
        onClick?: () => void;
    };
    onDismiss?: (toast: ToastT) => void;
    onAutoClose?: (toast: ToastT) => void;
    promise?: PromiseT;
    cancelButtonStyle?: JSX.CSSProperties;
    actionButtonStyle?: JSX.CSSProperties;
    style?: JSX.CSSProperties;
    unstyled?: boolean;
    class?: string;
    classes?: ToastClasses;
    descriptionClass?: string;
    position?: Position;
}
type Position = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'top-center' | 'bottom-center';
interface ToastOptions {
    class?: string;
    closeButton?: boolean;
    descriptionClass?: string;
    style?: JSX.CSSProperties;
    cancelButtonStyle?: JSX.CSSProperties;
    actionButtonStyle?: JSX.CSSProperties;
    duration?: number;
    unstyled?: boolean;
    classes?: ToastClasses;
}
interface ToasterProps {
    invert?: boolean;
    theme?: 'light' | 'dark' | 'system';
    position?: Position;
    hotkey?: string[];
    richColors?: boolean;
    expand?: boolean;
    duration?: number;
    gap?: number;
    visibleToasts?: number;
    closeButton?: boolean;
    toastOptions?: ToastOptions;
    class?: string;
    style?: JSX.CSSProperties;
    offset?: string | number;
    icons?: ToastIcons;
    dir?: 'rtl' | 'ltr' | 'auto';
    pauseWhenPageIsHidden?: boolean;
}
type ExternalToast = Omit<ToastT, 'id' | 'type' | 'title' | 'delete' | 'promise'> & {
    id?: number | string;
};

declare function toastFunction(message: string | JSX.Element, data?: ExternalToast): string | number;
declare const toast: typeof toastFunction & {
    success: (message: string | JSX.Element, data?: ExternalToast) => string | number;
    info: (message: string | JSX.Element, data?: ExternalToast) => string | number;
    warning: (message: string | JSX.Element, data?: ExternalToast) => string | number;
    error: (message: string | JSX.Element, data?: ExternalToast) => string | number;
    custom: (jsx: (id: number | string) => JSX.Element, data?: ExternalToast) => string | number;
    message: (message: string | JSX.Element, data?: ExternalToast) => string | number;
    promise: <ToastData>(promise: PromiseT<ToastData>, data?: PromiseData<ToastData> | undefined) => string | number | undefined;
    dismiss: (id?: number | string) => string | number | undefined;
    loading: (message: string | JSX.Element, data?: ExternalToast) => string | number;
};

/*!
 * Original code by Emil Kowalski
 * MIT Licensed, Copyright 2023 Emil Kowalski, see https://github.com/emilkowalski/sonner/blob/main/LICENSE.md for details
 *
 * Credits:
 * https://github.com/emilkowalski/sonner/blob/main/src/index.tsx
 */

declare const Toaster: Component<ToasterProps>;

export { type ExternalToast, type ToastT, Toaster, toast };
