type GetNextTabbableElement = {
    /**
     * Sets the relative position on getting the next tabbable element
     *
     * If `"activeElement"`, gets the current active element either from document or iframe context.
     *
     * If you are passing an iframe element, but intending to use current active element inside that iframe context, then use object argument `{ el: Element; getActiveElement: true }`
     */
    from: Element | "activeElement" | {
        el: Element;
        getActiveElement: boolean;
        isIframe: boolean;
    };
    direction?: "forwards" | "backwards";
    stopAtRootElement?: HTMLElement;
    /**
     * Skips tabbable elements
     *
     * @defaultValue `undefined`
     */
    ignoreElement?: HTMLElement[];
    allowSelectors?: string[];
    /**
     * To be used with `stopAtRootElement`.
     *
     * When `from` is the last tabbable item within `stopAtRootElement`, when continueing in the same direction, the first item will be focused within `stopAtRootElement`.
     *
     * @defaultValue `false`
     */
    wrap?: boolean;
};
export declare const getNextTabbableElement: ({ from: _from, stopAtRootElement: stopAtRootElement, ignoreElement, allowSelectors, direction, wrap, }: GetNextTabbableElement) => HTMLElement;
export declare const queryTabbableElement: (el: Element, selectors?: string, iterationDirection?: "forwards" | "backwards", ignoreElement?: HTMLElement[], windowContext?: Window, init?: boolean) => HTMLElement | null;
export {};
