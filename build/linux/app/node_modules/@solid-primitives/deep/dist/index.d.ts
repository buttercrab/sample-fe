import { Store } from 'solid-js/store';

/**
 * Tracks all properties of a {@link store} by iterating over them recursively.
 *
 * @param store reactive store dependency
 * @returns same {@link store} that was passed in
 *
 * @see https://github.com/solidjs-community/solid-primitives/tree/main/packages/deep#trackDeep
 *
 * @example
 * ```ts
 * createEffect(on(
 *   () => trackDeep(store),
 *   () => {
 *     // this effect will run when any property of store changes
 *   }
 * ));
 * ```
 */
declare function trackDeep<T extends Store<object>>(store: T): T;
/**
 * @deprecated Renamed to {@link trackDeep}
 */
declare const deepTrack: typeof trackDeep;

/**
 * Tracks all nested changes to passed {@link store}.
 *
 * @param store a reactive store proxy
 * @returns same {@link store} that was passed in
 *
 * @see https://github.com/solidjs-community/solid-primitives/tree/main/packages/deep#trackStore
 *
 * @example
 * ```ts
 * createEffect(on(
 *   () => trackStore(store),
 *   () => {
 *     // this effect will run when any property of store changes
 *   }
 * ));
 * ```
 */
declare function trackStore<T extends object>(store: Store<T>): T;

type Static<T = unknown> = {
    [K in number | string]: T;
} | T[];
type AllNestedObjects<T> = T extends Static<infer U> ? AllNestedObjects<U> | T : never;
type NestedUpdate<T> = {
    path: (string | number)[];
    value: AllNestedObjects<T>;
};
/**
 * Creates a function for tracking and capturing updates to a {@link store}.
 *
 * Each execution of the returned function will return an array of updates to the store since the last execution.
 *
 * @param store - The store to track.
 * @returns A function that returns an array of updates to the store since the last execution.
 *
 * @see https://github.com/solidjs-community/solid-primitives/tree/main/packages/deep#captureStoreUpdates
 *
 * @example
 * ```ts
 * const [state, setState] = createStore({ todos: [] });
 *
 * const getDelta = captureStoreUpdates(state);
 *
 * getDelta(); // [{ path: [], value: { todos: [] } }]
 *
 * setState("todos", ["foo"]);
 *
 * getDelta(); // [{ path: ["todos"], value: ["foo"] }]
 * ```
 */
declare function captureStoreUpdates<T extends Static>(store: T): () => NestedUpdate<T>[];

export { type AllNestedObjects, type NestedUpdate, captureStoreUpdates, deepTrack, trackDeep, trackStore };
