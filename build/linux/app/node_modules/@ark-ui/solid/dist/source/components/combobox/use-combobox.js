import * as combobox from '@zag-js/combobox';
import { normalizeProps, useMachine } from '@zag-js/solid';
import { createMemo, createUniqueId } from 'solid-js';
import { useEnvironmentContext, useLocaleContext } from '../../providers';
import { createSplitProps } from '../../utils/create-split-props';
import { useFieldContext } from '../field';
export const useCombobox = (props) => {
    const [collectionOptions, comboboxProps] = createSplitProps()(props, [
        'isItemDisabled',
        'itemToValue',
        'itemToString',
        'items',
    ]);
    const collection = () => combobox.collection({ ...collectionOptions });
    const locale = useLocaleContext();
    const environment = useEnvironmentContext();
    const id = createUniqueId();
    const field = useFieldContext();
    const context = createMemo(() => ({
        id,
        ids: {
            label: field?.().ids.label,
            input: field?.().ids.control,
        },
        disabled: field?.().disabled,
        readOnly: field?.().readOnly,
        required: field?.().required,
        invalid: field?.().invalid,
        collection: collection(),
        dir: locale().dir,
        getRootNode: environment().getRootNode,
        open: props.defaultOpen,
        value: props.defaultValue,
        'open.controlled': props.open !== undefined,
        ...comboboxProps,
    }));
    const [state, send] = useMachine(combobox.machine(context()), {
        context,
    });
    return createMemo(() => combobox.connect(state, send, normalizeProps));
};
