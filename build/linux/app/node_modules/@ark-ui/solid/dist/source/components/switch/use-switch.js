import { normalizeProps, useMachine } from '@zag-js/solid';
import * as zagSwitch from '@zag-js/switch';
import { createMemo, createUniqueId } from 'solid-js';
import { useEnvironmentContext, useLocaleContext } from '../../providers';
import { useFieldContext } from '../field';
export const useSwitch = (props) => {
    const locale = useLocaleContext();
    const environment = useEnvironmentContext();
    const id = createUniqueId();
    const field = useFieldContext();
    const context = createMemo(() => ({
        id,
        ids: {
            label: field?.().ids.label,
            hiddenInput: field?.().ids.control,
        },
        disabled: field?.().disabled,
        readOnly: field?.().readOnly,
        invalid: field?.().invalid,
        required: field?.().required,
        dir: locale().dir,
        getRootNode: environment().getRootNode,
        checked: props.defaultChecked,
        ...props,
    }));
    const [state, send] = useMachine(zagSwitch.machine(context()), { context });
    return createMemo(() => zagSwitch.connect(state, send, normalizeProps));
};
