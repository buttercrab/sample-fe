import { Accessor, JSX } from "solid-js";
import { SpinButtonIntlTranslations } from "../spin-button/spin-button.intl";
export interface NumberFieldContextValue {
    value: Accessor<number | string | undefined>;
    setValue: (value: number | string) => void;
    rawValue: Accessor<number>;
    generateId: (part: string) => string;
    formatNumber: (number: number) => string;
    format: () => void;
    onInput: JSX.EventHandlerUnion<HTMLInputElement, InputEvent>;
    textValue: Accessor<string | undefined>;
    minValue: Accessor<number>;
    maxValue: Accessor<number>;
    step: Accessor<number>;
    largeStep: Accessor<number>;
    changeOnWheel: Accessor<boolean>;
    translations: Accessor<SpinButtonIntlTranslations | undefined>;
    inputRef: Accessor<HTMLInputElement | undefined>;
    setInputRef: (el: HTMLInputElement) => void;
    hiddenInputRef: Accessor<HTMLInputElement | undefined>;
    setHiddenInputRef: (el: HTMLInputElement) => void;
    varyValue: (offset: number) => void;
}
export declare const NumberFieldContext: import("solid-js").Context<NumberFieldContextValue>;
export declare function useNumberFieldContext(): NumberFieldContextValue;
