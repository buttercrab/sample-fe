{"version":3,"sources":["../src/index.ts","../src/merge-props.ts","../src/normalize-props.ts","../../../utilities/core/src/guard.ts","../src/use-snapshot.ts","../src/use-actor.ts","../src/use-service.ts","../src/use-machine.ts"],"sourcesContent":["export type { ContextFrom, EventFrom, StateFrom } from \"@zag-js/core\"\nexport { mergeProps } from \"./merge-props\"\nexport * from \"./normalize-props\"\nexport * from \"./use-actor\"\nexport * from \"./use-machine\"\n","import { mergeProps as zagMergeProps } from \"@zag-js/core\"\n\nexport type MaybeAccessor<T> = T | (() => T)\n\nexport function mergeProps<T>(source: MaybeAccessor<T>): T\nexport function mergeProps<T, U>(source: MaybeAccessor<T>, source1: MaybeAccessor<U>): T & U\nexport function mergeProps<T, U, V>(\n  source: MaybeAccessor<T>,\n  source1: MaybeAccessor<U>,\n  source2: MaybeAccessor<V>,\n): T & U & V\nexport function mergeProps<T, U, V, W>(\n  source: MaybeAccessor<T>,\n  source1: MaybeAccessor<U>,\n  source2: MaybeAccessor<V>,\n  source3: MaybeAccessor<W>,\n): T & U & V & W\nexport function mergeProps(...sources: any[]) {\n  const target = {}\n  for (let i = 0; i < sources.length; i++) {\n    let source = sources[i]\n    if (typeof source === \"function\") source = source()\n    if (source) {\n      const descriptors = Object.getOwnPropertyDescriptors(source)\n      for (const key in descriptors) {\n        if (key in target) continue\n        Object.defineProperty(target, key, {\n          enumerable: true,\n          get() {\n            let e = {}\n            if (key === \"style\" || key === \"class\" || key === \"className\" || key.startsWith(\"on\")) {\n              for (let i = 0; i < sources.length; i++) {\n                let s = sources[i]\n                if (typeof s === \"function\") s = s()\n                e = zagMergeProps(e, { [key]: (s || {})[key] })\n              }\n\n              return (e as any)[key]\n            }\n            for (let i = sources.length - 1; i >= 0; i--) {\n              let v,\n                s = sources[i]\n              if (typeof s === \"function\") s = s()\n              v = (s || {})[key]\n              if (v !== undefined) return v\n            }\n          },\n        })\n      }\n    }\n  }\n  return target\n}\n","import { createNormalizer } from \"@zag-js/types\"\nimport { isNumber, isObject, isString } from \"@zag-js/utils\"\nimport type { JSX } from \"solid-js\"\n\nexport type PropTypes = JSX.IntrinsicElements & {\n  element: JSX.HTMLAttributes<any>\n  style: JSX.CSSProperties\n}\n\nconst eventMap: Record<string, string> = {\n  onFocus: \"onFocusIn\",\n  onBlur: \"onFocusOut\",\n  onDoubleClick: \"onDblClick\",\n  onChange: \"onInput\",\n  defaultChecked: \"checked\",\n  defaultValue: \"value\",\n  htmlFor: \"for\",\n  className: \"class\",\n}\n\nconst format = (v: string) => (v.startsWith(\"--\") ? v : hyphenateStyleName(v))\n\ntype StyleObject = Record<string, any>\n\nfunction toSolidProp(prop: string) {\n  return prop in eventMap ? eventMap[prop] : prop\n}\n\ntype Dict = Record<string, any>\n\nexport const normalizeProps = createNormalizer<PropTypes>((props: Dict) => {\n  const normalized: Dict = {}\n\n  for (const key in props) {\n    const value = props[key]\n\n    if (key === \"readOnly\" && value === false) {\n      continue\n    }\n\n    if (key === \"style\" && isObject(value)) {\n      normalized[\"style\"] = cssify(value)\n      continue\n    }\n\n    if (key === \"children\") {\n      if (isString(value)) {\n        normalized[\"textContent\"] = value\n      }\n      continue\n    }\n\n    normalized[toSolidProp(key)] = value\n  }\n  return normalized\n})\n\nfunction cssify(style: StyleObject): StyleObject {\n  let css = {} as StyleObject\n  for (const property in style) {\n    const value = style[property]\n    if (!isString(value) && !isNumber(value)) continue\n    css[format(property)] = value\n  }\n\n  return css\n}\n\nconst uppercasePattern = /[A-Z]/g\nconst msPattern = /^ms-/\n\nfunction toHyphenLower(match: string) {\n  return \"-\" + match.toLowerCase()\n}\n\nconst cache: Record<string, any> = {}\n\nfunction hyphenateStyleName(name: string) {\n  if (cache.hasOwnProperty(name)) return cache[name]\n  var hName = name.replace(uppercasePattern, toHyphenLower)\n  return (cache[name] = msPattern.test(hName) ? \"-\" + hName : hName)\n}\n","export const isDev = () => process.env.NODE_ENV !== \"production\"\nexport const isArray = (v: any): v is any[] => Array.isArray(v)\nexport const isBoolean = (v: any): v is boolean => v === true || v === false\nexport const isObject = (v: any): v is Record<string, any> => !(v == null || typeof v !== \"object\" || isArray(v))\nexport const isNumber = (v: any): v is number => typeof v === \"number\" && !Number.isNaN(v)\nexport const isString = (v: any): v is string => typeof v === \"string\"\nexport const isFunction = (v: any): v is Function => typeof v === \"function\"\nexport const isNull = (v: any): v is null | undefined => v == null\n\nexport const hasProp = <T extends string>(obj: any, prop: T): obj is Record<T, any> =>\n  Object.prototype.hasOwnProperty.call(obj, prop)\n","import type { Machine, StateMachine as S } from \"@zag-js/core\"\nimport { createEffect, onCleanup, onMount } from \"solid-js\"\nimport { createStore, reconcile } from \"solid-js/store\"\nimport type { MachineOptions } from \"./types\"\n\nexport function useSnapshot<\n  TContext extends Record<string, any>,\n  TState extends S.StateSchema,\n  TEvent extends S.EventObject = S.AnyEventObject,\n>(service: Machine<TContext, TState, TEvent>, options?: MachineOptions<TContext, TState, TEvent>) {\n  const { actions, context } = options ?? {}\n\n  const [state, setState] = createStore(service.getState())\n\n  onMount(() => {\n    const unsubscribe = service.subscribe((nextState) => {\n      setState(reconcile(nextState))\n    })\n\n    onCleanup(() => {\n      unsubscribe()\n    })\n  })\n\n  createEffect(() => {\n    const contextValue = typeof context === \"function\" ? context() : context\n    service.setContext(contextValue)\n  })\n\n  createEffect(() => {\n    service.setOptions({ actions })\n  })\n\n  return state\n}\n","import type { Machine, StateMachine as S } from \"@zag-js/core\"\nimport { useSnapshot } from \"./use-snapshot\"\n\nexport function useActor<\n  TContext extends Record<string, any>,\n  TState extends S.StateSchema,\n  TEvent extends S.EventObject = S.AnyEventObject,\n>(service: Machine<TContext, TState, TEvent>) {\n  const state = useSnapshot(service)\n  return [state, service.send] as const\n}\n","import type { MachineSrc, StateMachine as S } from \"@zag-js/core\"\nimport { onCleanup, onMount } from \"solid-js\"\nimport type { MachineOptions } from \"./types\"\n\nexport function useService<\n  TContext extends Record<string, any>,\n  TState extends S.StateSchema,\n  TEvent extends S.EventObject = S.AnyEventObject,\n>(machine: MachineSrc<TContext, TState, TEvent>, options?: MachineOptions<TContext, TState, TEvent>) {\n  const { state: hydratedState, context } = options ?? {}\n\n  const service = (() => {\n    const instance = typeof machine === \"function\" ? machine() : machine\n    const ctx = typeof context === \"function\" ? context() : context\n    if (ctx) instance.setContext(ctx)\n    instance._created()\n    return instance\n  })()\n\n  onMount(() => {\n    service.start(hydratedState)\n\n    onCleanup(() => {\n      service.stop()\n    })\n  })\n\n  return service\n}\n","import type { MachineSrc, StateMachine as S } from \"@zag-js/core\"\nimport type { MachineOptions } from \"./types\"\nimport { useService } from \"./use-service\"\nimport { useSnapshot } from \"./use-snapshot\"\n\nexport function useMachine<\n  TContext extends Record<string, any>,\n  TState extends S.StateSchema,\n  TEvent extends S.EventObject = S.AnyEventObject,\n>(machine: MachineSrc<TContext, TState, TEvent>, options?: MachineOptions<TContext, TState, TEvent>) {\n  const service = useService(machine, options)\n  const state = useSnapshot(service, options)\n  return [state, service.send, service] as const\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,kBAA4C;AAiBrC,SAAS,cAAc,SAAgB;AAC5C,QAAM,SAAS,CAAC;AAChB,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,QAAI,SAAS,QAAQ,CAAC;AACtB,QAAI,OAAO,WAAW,WAAY,UAAS,OAAO;AAClD,QAAI,QAAQ;AACV,YAAM,cAAc,OAAO,0BAA0B,MAAM;AAC3D,iBAAW,OAAO,aAAa;AAC7B,YAAI,OAAO,OAAQ;AACnB,eAAO,eAAe,QAAQ,KAAK;AAAA,UACjC,YAAY;AAAA,UACZ,MAAM;AACJ,gBAAI,IAAI,CAAC;AACT,gBAAI,QAAQ,WAAW,QAAQ,WAAW,QAAQ,eAAe,IAAI,WAAW,IAAI,GAAG;AACrF,uBAASA,KAAI,GAAGA,KAAI,QAAQ,QAAQA,MAAK;AACvC,oBAAI,IAAI,QAAQA,EAAC;AACjB,oBAAI,OAAO,MAAM,WAAY,KAAI,EAAE;AACnC,wBAAI,YAAAC,YAAc,GAAG,EAAE,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,GAAG,EAAE,CAAC;AAAA,cAChD;AAEA,qBAAQ,EAAU,GAAG;AAAA,YACvB;AACA,qBAASD,KAAI,QAAQ,SAAS,GAAGA,MAAK,GAAGA,MAAK;AAC5C,kBAAI,GACF,IAAI,QAAQA,EAAC;AACf,kBAAI,OAAO,MAAM,WAAY,KAAI,EAAE;AACnC,mBAAK,KAAK,CAAC,GAAG,GAAG;AACjB,kBAAI,MAAM,OAAW,QAAO;AAAA,YAC9B;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;;;ACpDA,mBAAiC;;;ACC1B,IAAM,UAAU,CAAC,MAAuB,MAAM,QAAQ,CAAC;AAEvD,IAAM,WAAW,CAAC,MAAqC,EAAE,KAAK,QAAQ,OAAO,MAAM,YAAY,QAAQ,CAAC;AACxG,IAAM,WAAW,CAAC,MAAwB,OAAO,MAAM,YAAY,CAAC,OAAO,MAAM,CAAC;AAClF,IAAM,WAAW,CAAC,MAAwB,OAAO,MAAM;;;ADI9D,IAAM,WAAmC;AAAA,EACvC,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,eAAe;AAAA,EACf,UAAU;AAAA,EACV,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,SAAS;AAAA,EACT,WAAW;AACb;AAEA,IAAM,SAAS,CAAC,MAAe,EAAE,WAAW,IAAI,IAAI,IAAI,mBAAmB,CAAC;AAI5E,SAAS,YAAY,MAAc;AACjC,SAAO,QAAQ,WAAW,SAAS,IAAI,IAAI;AAC7C;AAIO,IAAM,qBAAiB,+BAA4B,CAAC,UAAgB;AACzE,QAAM,aAAmB,CAAC;AAE1B,aAAW,OAAO,OAAO;AACvB,UAAM,QAAQ,MAAM,GAAG;AAEvB,QAAI,QAAQ,cAAc,UAAU,OAAO;AACzC;AAAA,IACF;AAEA,QAAI,QAAQ,WAAW,SAAS,KAAK,GAAG;AACtC,iBAAW,OAAO,IAAI,OAAO,KAAK;AAClC;AAAA,IACF;AAEA,QAAI,QAAQ,YAAY;AACtB,UAAI,SAAS,KAAK,GAAG;AACnB,mBAAW,aAAa,IAAI;AAAA,MAC9B;AACA;AAAA,IACF;AAEA,eAAW,YAAY,GAAG,CAAC,IAAI;AAAA,EACjC;AACA,SAAO;AACT,CAAC;AAED,SAAS,OAAO,OAAiC;AAC/C,MAAI,MAAM,CAAC;AACX,aAAW,YAAY,OAAO;AAC5B,UAAM,QAAQ,MAAM,QAAQ;AAC5B,QAAI,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,KAAK,EAAG;AAC1C,QAAI,OAAO,QAAQ,CAAC,IAAI;AAAA,EAC1B;AAEA,SAAO;AACT;AAEA,IAAM,mBAAmB;AACzB,IAAM,YAAY;AAElB,SAAS,cAAc,OAAe;AACpC,SAAO,MAAM,MAAM,YAAY;AACjC;AAEA,IAAM,QAA6B,CAAC;AAEpC,SAAS,mBAAmB,MAAc;AACxC,MAAI,MAAM,eAAe,IAAI,EAAG,QAAO,MAAM,IAAI;AACjD,MAAI,QAAQ,KAAK,QAAQ,kBAAkB,aAAa;AACxD,SAAQ,MAAM,IAAI,IAAI,UAAU,KAAK,KAAK,IAAI,MAAM,QAAQ;AAC9D;;;AEhFA,sBAAiD;AACjD,mBAAuC;AAGhC,SAAS,YAId,SAA4C,SAAoD;AAChG,QAAM,EAAE,SAAS,QAAQ,IAAI,WAAW,CAAC;AAEzC,QAAM,CAAC,OAAO,QAAQ,QAAI,0BAAY,QAAQ,SAAS,CAAC;AAExD,+BAAQ,MAAM;AACZ,UAAM,cAAc,QAAQ,UAAU,CAAC,cAAc;AACnD,mBAAS,wBAAU,SAAS,CAAC;AAAA,IAC/B,CAAC;AAED,mCAAU,MAAM;AACd,kBAAY;AAAA,IACd,CAAC;AAAA,EACH,CAAC;AAED,oCAAa,MAAM;AACjB,UAAM,eAAe,OAAO,YAAY,aAAa,QAAQ,IAAI;AACjE,YAAQ,WAAW,YAAY;AAAA,EACjC,CAAC;AAED,oCAAa,MAAM;AACjB,YAAQ,WAAW,EAAE,QAAQ,CAAC;AAAA,EAChC,CAAC;AAED,SAAO;AACT;;;AC/BO,SAAS,SAId,SAA4C;AAC5C,QAAM,QAAQ,YAAY,OAAO;AACjC,SAAO,CAAC,OAAO,QAAQ,IAAI;AAC7B;;;ACTA,IAAAE,mBAAmC;AAG5B,SAAS,WAId,SAA+C,SAAoD;AACnG,QAAM,EAAE,OAAO,eAAe,QAAQ,IAAI,WAAW,CAAC;AAEtD,QAAM,WAAW,MAAM;AACrB,UAAM,WAAW,OAAO,YAAY,aAAa,QAAQ,IAAI;AAC7D,UAAM,MAAM,OAAO,YAAY,aAAa,QAAQ,IAAI;AACxD,QAAI,IAAK,UAAS,WAAW,GAAG;AAChC,aAAS,SAAS;AAClB,WAAO;AAAA,EACT,GAAG;AAEH,gCAAQ,MAAM;AACZ,YAAQ,MAAM,aAAa;AAE3B,oCAAU,MAAM;AACd,cAAQ,KAAK;AAAA,IACf,CAAC;AAAA,EACH,CAAC;AAED,SAAO;AACT;;;ACvBO,SAAS,WAId,SAA+C,SAAoD;AACnG,QAAM,UAAU,WAAW,SAAS,OAAO;AAC3C,QAAM,QAAQ,YAAY,SAAS,OAAO;AAC1C,SAAO,CAAC,OAAO,QAAQ,MAAM,OAAO;AACtC;","names":["i","zagMergeProps","import_solid_js"]}