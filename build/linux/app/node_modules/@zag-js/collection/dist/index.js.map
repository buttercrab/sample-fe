{"version":3,"sources":["../src/index.ts","../src/grid-collection.ts","../src/list-collection.ts"],"sourcesContent":["export { GridCollection, type GridCollectionOptions } from \"./grid-collection\"\nexport { ListCollection } from \"./list-collection\"\nexport type {\n  CollectionItem,\n  CollectionMethods,\n  CollectionOptions,\n  CollectionSearchOptions,\n  CollectionSearchState,\n} from \"./types\"\n","import { chunk } from \"@zag-js/utils\"\nimport { ListCollection } from \"./list-collection\"\nimport type { CollectionItem, CollectionOptions } from \"./types\"\n\nexport interface GridCollectionOptions<T> extends CollectionOptions<T> {\n  columnCount: number\n}\n\nexport class GridCollection<T extends CollectionItem = CollectionItem> extends ListCollection<T> {\n  columnCount: number\n\n  constructor(options: GridCollectionOptions<T>) {\n    const { columnCount } = options\n    super(options)\n    this.columnCount = columnCount\n  }\n\n  /**\n   * Returns the row data in the grid\n   */\n  getRows(): T[][] {\n    return chunk([...this.items], this.columnCount)\n  }\n\n  /**\n   * Returns the number of rows in the grid\n   */\n  getRowCount(): number {\n    return this.getRows().length\n  }\n\n  /**\n   * Returns the index of the specified row and column in the grid\n   */\n  getCellIndex(row: number, column: number): number {\n    return row * this.columnCount + column\n  }\n\n  /**\n   * Returns the item at the specified row and column in the grid\n   */\n  getCell(row: number, column: number): T | null {\n    return this.at(this.getCellIndex(row, column))\n  }\n\n  /**\n   * Returns the value of the previous row in the grid, based on the current value\n   */\n  getPreviousRowValue(value: string, clamp = false): string | null {\n    return this.getPreviousValue(value, this.columnCount, clamp)\n  }\n\n  /**\n   * Returns the value of the next row in the grid, based on the current value\n   */\n  getNextRowValue(value: string, clamp = false): string | null {\n    return this.getNextValue(value, this.columnCount, clamp)\n  }\n}\n","import { hasProp, isEqual, isObject } from \"@zag-js/utils\"\nimport type { CollectionItem, CollectionMethods, CollectionOptions, CollectionSearchOptions } from \"./types\"\n\nconst fallback: CollectionMethods<any> = {\n  itemToValue(item) {\n    if (typeof item === \"string\") return item\n    if (isObject(item) && hasProp(item, \"value\")) return item.value\n    return \"\"\n  },\n  itemToString(item) {\n    if (typeof item === \"string\") return item\n    if (isObject(item) && hasProp(item, \"label\")) return item.label\n    return fallback.itemToValue(item)\n  },\n  isItemDisabled(item) {\n    if (isObject(item) && hasProp(item, \"disabled\")) return !!item.disabled\n    return false\n  },\n}\n\nexport class ListCollection<T extends CollectionItem = CollectionItem> {\n  /**\n   * The items in the collection\n   */\n  items: T[]\n\n  constructor(private options: CollectionOptions<T>) {\n    this.items = [...options.items] as T[]\n  }\n\n  isEqual(other: ListCollection<T>) {\n    return isEqual(this.items, other.items)\n  }\n\n  /**\n   * Function to update the collection items\n   */\n  setItems(items: T[] | readonly T[]) {\n    this.items = Array.from(items) as T[]\n  }\n\n  /**\n   * Returns all the values in the collection\n   */\n  getValues(items = this.items) {\n    return Array.from(items)\n      .map((item) => this.getItemValue(item))\n      .filter(Boolean) as string[]\n  }\n\n  /**\n   * Get the item based on its value\n   */\n  find(value: string | null | undefined): T | null {\n    if (value == null) return null\n    const index = this.items.findIndex((item) => this.getItemValue(item) === value)\n    return index != null ? this.items[index] : null\n  }\n\n  /**\n   * Get the items based on its values\n   */\n  findMany(values: string[]): T[] {\n    return Array.from(values)\n      .map((value) => this.find(value)!)\n      .filter(Boolean)\n  }\n\n  /**\n   * Get the item based on its index\n   */\n  at(index: number): T | null {\n    return this.items[index] ?? null\n  }\n\n  private sortFn(valueA: string, valueB: string): number {\n    const indexA = this.indexOf(valueA)\n    const indexB = this.indexOf(valueB)\n    return (indexA ?? 0) - (indexB ?? 0)\n  }\n\n  /**\n   * Sort the values based on their index\n   */\n  sort(values: string[]): string[] {\n    return [...values].sort(this.sortFn.bind(this))\n  }\n\n  /**\n   * Convert an item to a value\n   */\n  getItemValue(item: T | null | undefined): string | null {\n    if (item == null) return null\n    return this.options.itemToValue?.(item) ?? fallback.itemToValue(item)\n  }\n\n  /**\n   * Whether an item is disabled\n   */\n  getItemDisabled(item: T | null): boolean {\n    if (item == null) return false\n    return this.options.isItemDisabled?.(item) ?? fallback.isItemDisabled(item)\n  }\n\n  /**\n   * Convert an item to a string\n   */\n  stringifyItem(item: T | null): string | null {\n    if (item == null) return null\n    return this.options.itemToString?.(item) ?? fallback.itemToString(item)\n  }\n\n  /**\n   * Convert a value to a string\n   */\n  stringify(value: string | null): string | null {\n    if (value == null) return null\n    return this.stringifyItem(this.find(value))\n  }\n\n  /**\n   * Convert an array of items to a string\n   */\n  stringifyItems(items: T[], separator = \", \"): string {\n    return Array.from(items)\n      .map((item) => this.stringifyItem(item))\n      .filter(Boolean)\n      .join(separator)\n  }\n\n  /**\n   * Convert an array of items to a string\n   */\n  stringifyMany(value: string[], separator?: string): string {\n    return this.stringifyItems(this.findMany(value), separator)\n  }\n\n  /**\n   * Whether the collection has a value\n   */\n  has(value: string | null): boolean {\n    return this.indexOf(value) !== -1\n  }\n\n  /**\n   * Whether the collection has an item\n   */\n  hasItem(item: T | null): boolean {\n    if (item == null) return false\n    return this.has(this.getItemValue(item))\n  }\n\n  /**\n   * Returns the number of items in the collection\n   */\n  get size(): number {\n    return this.items.length\n  }\n\n  /**\n   * Returns the first value in the collection\n   */\n  get firstValue(): string | null {\n    let index = 0\n    while (this.getItemDisabled(this.at(index))) index++\n    return this.getItemValue(this.at(index))\n  }\n\n  /**\n   * Returns the last value in the collection\n   */\n  get lastValue(): string | null {\n    let index = this.size - 1\n    while (this.getItemDisabled(this.at(index))) index--\n    return this.getItemValue(this.at(index))\n  }\n\n  /**\n   * Returns the next value in the collection\n   */\n  getNextValue(value: string, step = 1, clamp = false): string | null {\n    let index = this.indexOf(value)\n    if (index === -1) return null\n    index = clamp ? Math.min(index + step, this.size - 1) : index + step\n    while (index <= this.size && this.getItemDisabled(this.at(index))) index++\n    return this.getItemValue(this.at(index))\n  }\n\n  /**\n   * Returns the previous value in the collection\n   */\n  getPreviousValue(value: string, step = 1, clamp = false): string | null {\n    let index = this.indexOf(value)\n    if (index === -1) return null\n    index = clamp ? Math.max(index - step, 0) : index - step\n    while (index >= 0 && this.getItemDisabled(this.at(index))) index--\n    return this.getItemValue(this.at(index))\n  }\n\n  /**\n   * Get the index of an item based on its key\n   */\n  indexOf(value: string | null): number {\n    if (value == null) return -1\n    return this.items.findIndex((item) => this.getItemValue(item) === value)\n  }\n\n  private getByText(text: string, current: string | null): T | undefined {\n    let items = current != null ? wrap(this.items, this.indexOf(current)) : this.items\n\n    const isSingleKey = text.length === 1\n    if (isSingleKey) items = items.filter((item) => this.getItemValue(item) !== current)\n\n    return items.find((item) => match(this.stringifyItem(item), text))\n  }\n\n  /**\n   * Search for a value based on a query\n   */\n  search(queryString: string, options: CollectionSearchOptions): string | null {\n    const { state, currentValue, timeout = 350 } = options\n\n    const search = state.keysSoFar + queryString\n    const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0])\n\n    const query = isRepeated ? search[0] : search\n\n    const item = this.getByText(query, currentValue)\n    const value = this.getItemValue(item)\n\n    function cleanup() {\n      clearTimeout(state.timer)\n      state.timer = -1\n    }\n\n    function update(value: string) {\n      state.keysSoFar = value\n      cleanup()\n\n      if (value !== \"\") {\n        state.timer = +setTimeout(() => {\n          update(\"\")\n          cleanup()\n        }, timeout)\n      }\n    }\n\n    update(search)\n\n    return value\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.items\n  }\n\n  insertBefore(value: string, item: T) {\n    const index = this.indexOf(value)\n    if (index === -1) return\n    this.items.splice(index, 0, item)\n  }\n\n  insertAfter(value: string, item: T) {\n    const index = this.indexOf(value)\n    if (index === -1) return\n    this.items.splice(index + 1, 0, item)\n  }\n\n  reorder(fromIndex: number, toIndex: number) {\n    if (fromIndex === -1 || toIndex === -1) return\n    if (fromIndex === toIndex) return\n\n    const [removed] = this.items.splice(fromIndex, 1)\n\n    this.items.splice(toIndex, 0, removed)\n  }\n\n  toJSON() {\n    return {\n      size: this.size,\n      first: this.firstValue,\n      last: this.lastValue,\n    }\n  }\n}\n\nconst match = (label: string | null, query: string) => {\n  return !!label?.toLowerCase().startsWith(query.toLowerCase())\n}\n\nconst wrap = <T>(v: T[] | readonly T[], idx: number) => {\n  return v.map((_, index) => v[(Math.max(idx, 0) + index) % v.length])\n}\n"],"mappings":"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","names":["import_utils","value"]}