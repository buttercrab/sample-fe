{"version":3,"sources":["../src/index.ts","../src/timer.anatomy.ts","../src/timer.connect.ts","../src/timer.machine.ts","../src/timer.parse.ts","../src/timer.props.ts"],"sourcesContent":["export { anatomy } from \"./timer.anatomy\"\nexport { connect } from \"./timer.connect\"\nexport { machine } from \"./timer.machine\"\nexport * from \"./timer.parse\"\nexport * from \"./timer.props\"\nexport type {\n  ActionTriggerProps,\n  MachineApi as Api,\n  UserDefinedContext as Context,\n  ItemProps,\n  MachineState,\n  Service,\n  TickDetails,\n  Time,\n  TimePart,\n  TimerAction,\n} from \"./timer.types\"\n","import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"timer\").parts(\n  \"root\",\n  \"item\",\n  \"itemValue\",\n  \"itemLabel\",\n  \"actionTrigger\",\n  \"separator\",\n)\n\nexport const parts = anatomy.build()\n","import type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./timer.anatomy\"\nimport type { MachineApi, Send, State } from \"./timer.types\"\n\nconst validActions = new Set([\"start\", \"pause\", \"resume\", \"reset\", \"restart\"])\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const running = state.matches(\"running\")\n  const paused = state.matches(\"paused\")\n\n  const time = state.context.time\n  const formattedTime = state.context.formattedTime\n  const progressPercent = state.context.progressPercent\n\n  return {\n    running,\n    paused,\n    time,\n    formattedTime,\n    progressPercent,\n    start() {\n      send(\"START\")\n    },\n    pause() {\n      send(\"PAUSE\")\n    },\n    resume() {\n      send(\"RESUME\")\n    },\n    reset() {\n      send(\"RESET\")\n    },\n    restart() {\n      send(\"RESTART\")\n    },\n\n    getRootProps() {\n      return normalize.element({\n        role: \"timer\",\n        ...parts.root.attrs,\n      })\n    },\n\n    getItemProps(props) {\n      const value = time[props.type]\n      return normalize.element({\n        ...parts.item.attrs,\n        \"data-type\": props.type,\n        style: {\n          \"--value\": value,\n        },\n      })\n    },\n\n    getItemLabelProps(props) {\n      return normalize.element({\n        ...parts.itemLabel.attrs,\n        \"data-type\": props.type,\n      })\n    },\n\n    getItemValueProps(props) {\n      return normalize.element({\n        ...parts.itemValue.attrs,\n        \"data-type\": props.type,\n      })\n    },\n\n    getSeparatorProps() {\n      return normalize.element({\n        ...parts.separator.attrs,\n      })\n    },\n\n    getActionTriggerProps(props) {\n      if (!validActions.has(props.action)) {\n        throw new Error(`Invalid action: ${props.action}. Must be one of: ${Array.from(validActions).join(\", \")}`)\n      }\n\n      return normalize.button({\n        ...parts.actionTrigger.attrs,\n        onClick() {\n          send(props.action.toUpperCase())\n        },\n      })\n    },\n  }\n}\n","import { createMachine } from \"@zag-js/core\"\nimport { compact } from \"@zag-js/utils\"\nimport type { MachineContext, MachineState, Time, UserDefinedContext } from \"./timer.types\"\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"timer\",\n      initial: ctx.autoStart ? \"running\" : \"idle\",\n      context: {\n        interval: 250,\n        ...ctx,\n        currentMs: ctx.startMs ?? 0,\n      },\n\n      on: {\n        RESTART: {\n          target: \"running\",\n          actions: \"resetTime\",\n        },\n      },\n\n      computed: {\n        time: (ctx) => msToTime(ctx.currentMs),\n        formattedTime: (ctx) => formatTime(ctx.time),\n        progressPercent: (ctx) => {\n          const targetMs = ctx.targetMs\n          if (targetMs == null) return 0\n          return toPercent(ctx.currentMs, ctx.startMs ?? 0, targetMs)\n        },\n      },\n\n      states: {\n        idle: {\n          on: {\n            START: \"running\",\n            RESET: { actions: \"resetTime\" },\n          },\n        },\n        running: {\n          every: {\n            TICK_INTERVAL: [\"sendTickEvent\"],\n          },\n          on: {\n            PAUSE: \"paused\",\n            TICK: [\n              {\n                target: \"idle\",\n                guard: \"hasReachedTarget\",\n                actions: [\"invokeOnComplete\"],\n              },\n              {\n                actions: [\"updateTime\", \"invokeOnTick\"],\n              },\n            ],\n            RESET: { actions: \"resetTime\" },\n          },\n        },\n        paused: {\n          on: {\n            RESUME: \"running\",\n            RESET: {\n              target: \"idle\",\n              actions: \"resetTime\",\n            },\n          },\n        },\n      },\n    },\n    {\n      delays: {\n        TICK_INTERVAL: (ctx) => ctx.interval,\n      },\n      actions: {\n        updateTime(ctx) {\n          const sign = ctx.countdown ? -1 : 1\n          ctx.currentMs = ctx.currentMs + sign * ctx.interval\n        },\n        sendTickEvent(_ctx, _evt, { send }) {\n          send({ type: \"TICK\" })\n        },\n        resetTime(ctx) {\n          let targetMs = ctx.targetMs\n          if (targetMs == null && ctx.countdown) targetMs = 0\n          ctx.currentMs = ctx.startMs ?? 0\n        },\n        invokeOnTick(ctx) {\n          ctx.onTick?.({\n            value: ctx.currentMs,\n            time: ctx.time,\n            formattedTime: ctx.formattedTime,\n          })\n        },\n        invokeOnComplete(ctx) {\n          ctx.onComplete?.()\n        },\n      },\n      guards: {\n        hasReachedTarget: (ctx) => {\n          let targetMs = ctx.targetMs\n          if (targetMs == null && ctx.countdown) targetMs = 0\n          if (targetMs == null) return false\n          return ctx.currentMs === targetMs\n        },\n      },\n    },\n  )\n}\n\nfunction msToTime(ms: number): Time {\n  const milliseconds = ms % 1000\n  const seconds = Math.floor(ms / 1000) % 60\n  const minutes = Math.floor(ms / (1000 * 60)) % 60\n  const hours = Math.floor(ms / (1000 * 60 * 60)) % 24\n  const days = Math.floor(ms / (1000 * 60 * 60 * 24))\n  return {\n    days,\n    hours,\n    minutes,\n    seconds,\n    milliseconds,\n  }\n}\n\nfunction toPercent(value: number, minValue: number, maxValue: number) {\n  return (value - minValue) / (maxValue - minValue)\n}\n\nfunction padStart(num: number, size = 2) {\n  return num.toString().padStart(size, \"0\")\n}\n\nfunction formatTime(time: Time): Time<string> {\n  const { days, hours, minutes, seconds } = time\n  return {\n    days: padStart(days),\n    hours: padStart(hours),\n    minutes: padStart(minutes),\n    seconds: padStart(seconds),\n    milliseconds: time.milliseconds.toString(),\n  }\n}\n","import { isObject } from \"@zag-js/utils\"\nimport type { TimePart, Time } from \"./timer.types\"\n\nconst segments = new Set<TimePart>([\"days\", \"hours\", \"minutes\", \"seconds\"])\n\nfunction isTimeSegment(date: any): date is Time {\n  return isObject(date) && Object.keys(date).some((key) => segments.has(key as any))\n}\n\nexport function parse(date: string | Partial<Time>): number {\n  if (typeof date === \"string\") {\n    return new Date(date).getTime()\n  }\n\n  if (isTimeSegment(date)) {\n    const { days = 0, hours = 0, minutes = 0, seconds = 0, milliseconds = 0 } = date\n    const value = (days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds) * 1000\n    return value + milliseconds\n  }\n\n  throw new Error(\"Invalid date\")\n}\n","import { createProps } from \"@zag-js/types\"\nimport { createSplitProps } from \"@zag-js/utils\"\nimport type { UserDefinedContext } from \"./timer.types\"\n\nexport const props = createProps<UserDefinedContext>()([\n  \"autoStart\",\n  \"countdown\",\n  \"getRootNode\",\n  \"id\",\n  \"interval\",\n  \"onComplete\",\n  \"onTick\",\n  \"startMs\",\n  \"targetMs\",\n])\n\nexport const splitProps = createSplitProps<Partial<UserDefinedContext>>(props)\n"],"mappings":"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","names":["props","ctx","import_utils","import_utils"]}