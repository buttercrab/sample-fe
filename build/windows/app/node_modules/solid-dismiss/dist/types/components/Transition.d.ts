import { Component, JSX } from "solid-js";
import { TLocalState } from "../local/localState";
export type DismissAnimation = {
    /**
     * Used to automatically generate transition CSS class names. e.g. name: 'fade' will auto expand to .fade-enter, .fade-enter-active, etc.
     */
    name?: string;
    enterActiveClass?: string;
    enterClass?: string;
    enterToClass?: string;
    exitActiveClass?: string;
    exitClass?: string;
    exitToClass?: string;
    onBeforeEnter?: (el: Element) => void;
    onEnter?: (el: Element, done: () => void) => void;
    onAfterEnter?: (el: Element) => void;
    onBeforeExit?: (el: Element) => void;
    onExit?: (el: Element, done: () => void) => void;
    onAfterExit?: (el: Element) => void;
    /**
     * Change element where CSS classes are appended and passed to callbacks.
     *
     * Pass CSS selector, queried from root component, `"menuPopup"` uses menuPopup element, or pass JSX element.
     *
     * @defaultValue The element is the root element of the component, where CSS classes are appended to, and it is also passed to callbacks.
     */
    appendToElement?: "menuPopup" | JSX.Element;
    /**
     * Whether to apply transition on initial render.
     *
     * @defaultValue `false`
     */
    appear?: boolean;
};
export declare const Transition: Component<DismissAnimation & {
    children: JSX.Element;
    mode?: "inout" | "outin";
    overlay?: DismissAnimation;
    state: TLocalState;
}>;
