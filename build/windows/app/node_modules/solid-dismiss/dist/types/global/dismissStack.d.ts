import { TDismiss } from "..";
import { TLocalState } from "../local/localState";
export type TDismissStack = Pick<TDismiss, "focusElementOnClose" | "overlayElement" | "open" | "setOpen" | "mountedPopupsSafeList"> & Pick<TLocalState, "timeouts" | "uniqueId" | "cursorKeys" | "closeWhenDocumentBlurs" | "closeWhenMenuButtonIsTabbed" | "closeWhenEscapeKeyIsPressed" | "closeWhenClickingOutside" | "upperStackRemovedByFocusOut" | "menuPopupEl" | "overlayEl" | "overlay" | "focusSentinelBeforeEl" | "focusSentinelAfterEl" | "ignoreMenuPopupWhenTabbing"> & {
    id: string;
    menuBtnEls: HTMLElement[];
    focusedMenuBtn: {
        el: HTMLElement | null;
    };
    containerEl: HTMLElement;
    detectIfMenuButtonObscured: boolean;
    queueRemoval: boolean;
};
export declare const dismissStack: TDismissStack[];
export declare const addDismissStack: (props: TDismissStack) => void;
export declare const removeDismissStack: (id: string) => TDismissStack;
