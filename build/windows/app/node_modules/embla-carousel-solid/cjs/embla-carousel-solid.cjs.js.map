{"version":3,"file":"embla-carousel-solid.cjs.js","sources":["../src/components/createEmblaCarousel.ts"],"sourcesContent":["import EmblaCarousel, {\n  EmblaCarouselType,\n  type EmblaOptionsType,\n  type EmblaPluginType\n} from 'embla-carousel'\nimport {\n  areOptionsEqual,\n  arePluginsEqual,\n  canUseDOM\n} from 'embla-carousel-reactive-utils'\nimport {\n  Accessor,\n  Setter,\n  createEffect,\n  createSignal,\n  on,\n  onCleanup\n} from 'solid-js'\n\nexport type CreateEmblaCarouselType = [\n  Setter<HTMLElement | undefined>,\n  Accessor<EmblaCarouselType | undefined>\n]\n\nfunction createEmblaCarousel(\n  options?: Accessor<EmblaOptionsType>,\n  plugins?: Accessor<EmblaPluginType[]>\n): CreateEmblaCarouselType {\n  let storedOptions = options ? options() : {}\n  let storedPlugins = plugins ? plugins() : []\n  const [emblaApi, setEmblaApi] = createSignal<EmblaCarouselType>()\n  const [viewport, setViewport] = createSignal<HTMLElement>()\n\n  function reInit(): void {\n    const api = emblaApi()\n    if (api) api.reInit(storedOptions, storedPlugins)\n  }\n\n  createEffect(\n    on(viewport, (viewport) => {\n      if (canUseDOM() && viewport) {\n        EmblaCarousel.globalOptions = createEmblaCarousel.globalOptions\n        const newEmblaApi = EmblaCarousel(\n          viewport,\n          storedOptions,\n          storedPlugins\n        )\n        setEmblaApi(newEmblaApi)\n        onCleanup(() => newEmblaApi.destroy())\n      } else {\n        setEmblaApi(undefined)\n      }\n    })\n  )\n\n  createEffect(() => {\n    if (!canUseDOM()) return\n    const newOptions = options ? options() : {}\n    if (areOptionsEqual(storedOptions, newOptions)) return\n    storedOptions = newOptions\n    reInit()\n  })\n\n  createEffect(() => {\n    if (!canUseDOM()) return\n    const newPlugins = plugins ? plugins() : []\n    if (arePluginsEqual(storedPlugins, newPlugins)) return\n    storedPlugins = newPlugins\n    reInit()\n  })\n\n  return [setViewport, emblaApi]\n}\n\ndeclare namespace createEmblaCarousel {\n  let globalOptions: EmblaOptionsType | undefined\n}\n\ncreateEmblaCarousel.globalOptions = undefined\n\nexport default createEmblaCarousel\n"],"names":["createEmblaCarousel","options","plugins","storedOptions","storedPlugins","emblaApi","setEmblaApi","createSignal","viewport","setViewport","reInit","api","createEffect","on","canUseDOM","EmblaCarousel","globalOptions","newEmblaApi","onCleanup","destroy","undefined","newOptions","areOptionsEqual","newPlugins","arePluginsEqual"],"mappings":";;;;;;AAwBA,SAASA,mBAAmBA,CAC1BC,OAAoC,EACpCC,OAAqC,EAAA;EAErC,IAAIC,aAAa,GAAGF,OAAO,GAAGA,OAAO,EAAE,GAAG,EAAE,CAAA;EAC5C,IAAIG,aAAa,GAAGF,OAAO,GAAGA,OAAO,EAAE,GAAG,EAAE,CAAA;EAC5C,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGC,oBAAY,EAAqB,CAAA;EACjE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGF,oBAAY,EAAe,CAAA;EAE3D,SAASG,MAAMA,GAAA;AACb,IAAA,MAAMC,GAAG,GAAGN,QAAQ,EAAE,CAAA;IACtB,IAAIM,GAAG,EAAEA,GAAG,CAACD,MAAM,CAACP,aAAa,EAAEC,aAAa,CAAC,CAAA;AACnD,GAAA;AAEAQ,EAAAA,oBAAY,CACVC,UAAE,CAACL,QAAQ,EAAGA,QAAQ,IAAI;AACxB,IAAA,IAAIM,oCAAS,EAAE,IAAIN,QAAQ,EAAE;AAC3BO,MAAAA,aAAa,CAACC,aAAa,GAAGhB,mBAAmB,CAACgB,aAAa,CAAA;MAC/D,MAAMC,WAAW,GAAGF,aAAa,CAC/BP,QAAQ,EACRL,aAAa,EACbC,aAAa,CACd,CAAA;MACDE,WAAW,CAACW,WAAW,CAAC,CAAA;AACxBC,MAAAA,iBAAS,CAAC,MAAMD,WAAW,CAACE,OAAO,EAAE,CAAC,CAAA;AACxC,KAAC,MAAM;MACLb,WAAW,CAACc,SAAS,CAAC,CAAA;AACxB,KAAA;AACF,GAAC,CAAC,CACH,CAAA;AAEDR,EAAAA,oBAAY,CAAC,MAAK;AAChB,IAAA,IAAI,CAACE,oCAAS,EAAE,EAAE,OAAA;IAClB,MAAMO,UAAU,GAAGpB,OAAO,GAAGA,OAAO,EAAE,GAAG,EAAE,CAAA;AAC3C,IAAA,IAAIqB,0CAAe,CAACnB,aAAa,EAAEkB,UAAU,CAAC,EAAE,OAAA;AAChDlB,IAAAA,aAAa,GAAGkB,UAAU,CAAA;AAC1BX,IAAAA,MAAM,EAAE,CAAA;AACV,GAAC,CAAC,CAAA;AAEFE,EAAAA,oBAAY,CAAC,MAAK;AAChB,IAAA,IAAI,CAACE,oCAAS,EAAE,EAAE,OAAA;IAClB,MAAMS,UAAU,GAAGrB,OAAO,GAAGA,OAAO,EAAE,GAAG,EAAE,CAAA;AAC3C,IAAA,IAAIsB,0CAAe,CAACpB,aAAa,EAAEmB,UAAU,CAAC,EAAE,OAAA;AAChDnB,IAAAA,aAAa,GAAGmB,UAAU,CAAA;AAC1Bb,IAAAA,MAAM,EAAE,CAAA;AACV,GAAC,CAAC,CAAA;AAEF,EAAA,OAAO,CAACD,WAAW,EAAEJ,QAAQ,CAAC,CAAA;AAChC,CAAA;AAMAL,mBAAmB,CAACgB,aAAa,GAAGI,SAAS;;;;"}