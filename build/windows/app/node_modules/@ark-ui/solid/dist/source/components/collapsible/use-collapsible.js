import * as collapsible from '@zag-js/collapsible';
import { normalizeProps, useMachine } from '@zag-js/solid';
import { createEffect, createMemo, createSignal, createUniqueId } from 'solid-js';
import { useEnvironmentContext, useLocaleContext } from '../../providers';
import { splitRenderStrategyProps } from '../../utils/render-strategy';
export const useCollapsible = (props) => {
    const locale = useLocaleContext();
    const environment = useEnvironmentContext();
    const [renderStrategyProps, collapsibleProps] = splitRenderStrategyProps(props);
    const id = createUniqueId();
    const context = createMemo(() => ({
        id,
        dir: locale().dir,
        getRootNode: environment().getRootNode,
        open: props.defaultOpen,
        'open.controlled': props.open !== undefined,
        ...collapsibleProps,
    }));
    const [state, send] = useMachine(collapsible.machine(context()), { context });
    const [wasVisible, setWasVisible] = createSignal(false);
    createEffect(() => {
        const isPresent = api().visible;
        if (isPresent)
            setWasVisible(true);
    });
    const api = createMemo(() => collapsible.connect(state, send, normalizeProps));
    return createMemo(() => ({
        ...api(),
        unmounted: (!api().visible && !wasVisible() && renderStrategyProps.lazyMount) ||
            (renderStrategyProps.unmountOnExit && !api().visible && wasVisible()),
    }));
};
