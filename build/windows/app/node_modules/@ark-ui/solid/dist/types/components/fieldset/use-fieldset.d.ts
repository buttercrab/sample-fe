export interface UseFieldsetProps {
    /**
     * The id of the fieldset.
     */
    id?: string;
    /**
     * Indicates whether the fieldset is disabled.
     */
    disabled?: boolean;
    /**
     * Indicates whether the fieldset is invalid.
     */
    invalid?: boolean;
}
export type UseFieldsetReturn = ReturnType<typeof useFieldset>;
export declare const useFieldset: (props: UseFieldsetProps) => import("solid-js").Accessor<{
    refs: {
        rootRef: HTMLFieldSetElement;
    };
    disabled: boolean;
    invalid: boolean;
    getRootProps: () => {
        disabled: boolean;
        'data-disabled': Booleanish;
        'data-invalid': Booleanish;
        'aria-describedby': string;
        "data-scope": string;
        "data-part": string;
    };
    getLegendProps: () => {
        'data-disabled': Booleanish;
        'data-invalid': Booleanish;
        "data-scope": string;
        "data-part": string;
    };
    getHelperTextProps: () => {
        "data-scope": string;
        "data-part": string;
        id: string;
    };
    getErrorTextProps: () => {
        'aria-live': string;
        "data-scope": string;
        "data-part": string;
        id: string;
    };
}>;
type Booleanish = boolean | 'true' | 'false';
export {};
